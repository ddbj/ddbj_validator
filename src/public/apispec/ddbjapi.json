{
  "swagger": "2.0",
  "info": {
    "title": "DDBJ Data Validation API",
    "description": "DDBJ Data Validation API",
    "version": "0.9.0"
  },
  "host": "localhost:9292",
  "schemes": [
    "http"
  ],
  "basePath": "/api",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/validation": {
      "post": {
        "tags": [
          "Validation"
        ],
        "summary": "execute validation",
        "description": "Create a new validation job",
        "operationId": "validation",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/submission"
          },
          {
            "$ref": "#/parameters/bioproject"
          },
          {
            "$ref": "#/parameters/biosample"
          },
          {
            "$ref": "#/parameters/expreriment"
          },
          {
            "$ref": "#/parameters/run"
          },
          {
            "$ref": "#/parameters/analysis"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Accept"
            }
          },
          "400": {
            "description": "Bad Request. Invalid input file supplied.",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "invalid file combination": {
                "message": "Invalid combination of files"
              }
            }
          }
        }
      }
    },
    "/validation/{uuid}": {
      "get": {
        "tags": [
          "Validation"
        ],
        "summary": "validation result",
        "description": "Get specific validation result",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "text/plain"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/ValidationResult"
            },
            "examples": {
              "succeed (Passed the all validation rules)": {
                "status": "success"
              },
              "failed (Failed with some validation rule)": {
                "status": "fail",
                "failed_list": {
                  "id": "14",
                  "message": "Not predefined attribute name.",
                  "level": "warning",
                  "method": "BioSample",
                  "object": [
                    "BioSample"
                  ],
                  "source": "SSUB000019_ng.xml",
                  "annotation": [
                    {
                      "key": "Sample name",
                      "value": "MTB313"
                    },
                    {
                      "key": "Attribute names",
                      "value": "sample_title"
                    }
                  ]
                }
              },
              "error (An error occurred while executing the validation process)": {
                "status": "error",
                "message": "Failed the sparql query."
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "not exist UUID": {
                "message": "Invalid UUID"
              },
              "unfinished UUID": {
                "message": "This validation job has not completed yet"
              }
            }
          }
        }
      }
    },
    "/validation/{uuid}/status": {
      "get": {
        "tags": [
          "Validation"
        ],
        "summary": "validation status",
        "description": "Get specific validation status",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "text/plain"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Status"
            },
            "examples": {
              "unfinished status": {
                "uuid": "27ca0fbf-88a9-49c5-96f6-f3dfd257888f",
                "status": "runnning",
                "start-time": "2017-08-29 21:15:53 +0900"
              },
              "finished status": {
                "uuid": "27ca0fbf-88a9-49c5-96f6-f3dfd257888f",
                "status": "finished",
                "start-time": "2017-08-29 21:15:53 +0900",
                "end-time": "2017-08-29 21:16:03 +0900"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "not exist UUID": {
                "message": "Invalid UUID"
              }
            }
          }
        }
      }
    },
    "/validation/{uuid}/{filetype}": {
      "get": {
        "tags": [
          "Validation"
        ],
        "summary": "validation original file",
        "description": "Get the original file of specific validation",
        "produces": [
          "application/xml"
        ],
        "consumes": [
          "text/plain"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "$ref": "#/parameters/filetype"
          }
        ],
        "responses": {
          "200": {
            "description": "An original xml file validated",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "not exist UUID": {
                "message": "Invalid UUID"
              },
              "invalid filetype": {
                "message": "Invalid or not exist filetype."
              }
            }
          }
        }
      }
    },
    "/validation/{uuid}/{filetype}/autocorrect": {
      "get": {
        "tags": [
          "Validation"
        ],
        "summary": "validation autocorrected file",
        "description": "Get the autocorrected file of specific validation",
        "produces": [
          "application/xml"
        ],
        "consumes": [
          "text/plain"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "$ref": "#/parameters/filetype"
          }
        ],
        "responses": {
          "200": {
            "description": "An autocorrected xml file",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "not exist UUID": {
                "message": "Invalid UUID"
              },
              "invalid filetype": {
                "message": "Invalid or not exist filetype."
              },
              "no autocorrect fields": {
                "message": "not exist autocorrect fields on this validation."
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "submission": {
      "name": "submission",
      "in": "formData",
      "description": "Upload DRA submission XML file.",
      "required": false,
      "type": "file"
    },
    "bioproject": {
      "name": "bioproject",
      "in": "formData",
      "description": "Upload BioProject XML file.",
      "required": false,
      "type": "file"
    },
    "biosample": {
      "name": "biosample",
      "in": "formData",
      "description": "Upload BioSample XML file.",
      "required": false,
      "type": "file"
    },
    "expreriment": {
      "name": "expreriment",
      "in": "formData",
      "description": "Upload DRA expreriment XML file.",
      "required": false,
      "type": "file"
    },
    "run": {
      "name": "run",
      "in": "formData",
      "description": "Upload DRA run XML file.",
      "required": false,
      "type": "file"
    },
    "analysis": {
      "name": "analysis",
      "in": "formData",
      "description": "Upload DRA analysis XML file.",
      "required": false,
      "type": "file"
    },
    "uuid": {
      "name": "uuid",
      "in": "path",
      "description": "Unique identifier of Validation Job.",
      "required": true,
      "type": "string"
    },
    "filetype": {
      "name": "filetype",
      "in": "path",
      "description": "filetype e.g., submission, biosample, bioproject, run,",
      "required": true,
      "type": "string"
    }
  },
  "definitions": {
    "Accept": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        }
      },
      "example": {
        "uuid": "27ca0fbf-88a9-49c5-96f6-f3dfd257888f"
      }
    },
    "ValidationResult": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "validation status.<br/> \"success\" Passed the all validation rules<br/> \"fail\" Failed with some validation rules<br/> \"error\" An error occurred while executing the validation process"
        },
        "failed_list": {
          "type": "array",
          "description": "validation error list. List of error contents when status of validation is \"fail\"."
        },
        "message": {
          "type": "string",
          "description": "when status of validation is \"error\""
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "\"runnning\" or \"finished\""
        },
        "start-time": {
          "type": "string"
        },
        "end-time": {
          "type": "string",
          "description": "only when status is \"finished\""
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "error_message": {
          "type": "string"
        }
      }
    }
  }
}